# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_main.ipynb.

# %% auto 0
__all__ = ['app', 'version', 'config', 'arxiv_top_categories', 'arxiv_sub_categories', 'personalized_papers', 'config_exists',
           'config_check_one_exists', 'get_embeddings_dimensions', 'init']

# %% ../nbs/00_main.ipynb 3
import arxiv
import chromadb
import os
import typer
from dotenv import load_dotenv
from . import __version__
from .arxiv_categories import exists, main, sub
from .arxiv_sync import sync_arxiv
from .embedding import embed_category_papers, download_embedding_model, embedding_system
from .personalize import get_personalized_papers, save_personalized_papers_in_zotero
from rich import print
from typing_extensions import Annotated

# %% ../nbs/00_main.ipynb 5
app = typer.Typer()

# %% ../nbs/00_main.ipynb 7
@app.command()
def version():
    """Get the current installed version of ReadNext"""
    print(f"Version: {__version__}")

# %% ../nbs/00_main.ipynb 10
@app.command()
def config():
    """Get the current configuration of ReadNext"""
    print(f"DOCS_PATH: {os.environ.get('DOCS_PATH')}")
    print(f"RECOMMENDATIONS_PATH: {os.environ.get('RECOMMENDATIONS_PATH')}")
    print(f"CHROMA_DB_PATH: {os.environ.get('CHROMA_DB_PATH')}")
    print(f"MODELS_PATH: {os.environ.get('MODELS_PATH')}")
    print(f"EMBEDDING_SYSTEM: {os.environ.get('EMBEDDING_SYSTEM')}")
    print(f"ZOTERO_LIBRARY_TYPE: {os.environ.get('ZOTERO_LIBRARY_TYPE')}")
    print(f"ZOTERO_API_KEY: {os.environ.get('ZOTERO_API_KEY')}")
    print(f"ZOTERO_LIBRARY_ID: {os.environ.get('ZOTERO_LIBRARY_ID')}")
    print(f"COHERE_API_KEY: {os.environ.get('COHERE_API_KEY')}")

# %% ../nbs/00_main.ipynb 13
@app.command()
def arxiv_top_categories():
    "Display ArXiv main categories. Keys are case sensitive."
    print(main)

# %% ../nbs/00_main.ipynb 16
@app.command()
def arxiv_sub_categories():
    "Display ArXiv sub categories. Keys are case sensitive."
    print(sub)

# %% ../nbs/00_main.ipynb 19
@app.command()
def personalized_papers(category: str, 
                        focus_collection: str, 
                        proposals_collection: Annotated[str, 
                                                        typer.Option("--proposals-collection",
                                                        help="Save personalized papers in Zotero in target Zotero collection.")] = "", 
                        with_artifacts: Annotated[bool, 
                                                  typer.Option("--with-artifacts", 
                                                               "-a",
                                                               help="Add paper artifacts (PDFs & summary files) to Zotero when saving.")] = False,                                                               
                        nb_proposals=10):
    """Get personalized papers of a `focus-collection` from an ArXiv `category`. 
    If the category is `all` then all categories that have been locally synced will be used.
    if --proposals-collection is set, then the papers will be uploaded to the 
    that Zotero collection, otherwise it will only be displayed to the command line.
    """

    # Step 1: Make sure the category exists
    if exists(category):
        # Step 2: get today's list of papers from arXiv
        print("[green]Syncing today's ArXiv latest papers...[/green]")
        sync_arxiv(category)

        # Step 3: create embeddings for each of those new papers
        print("[green]Creating embeddings for each new paper...[/green]")
        embed_category_papers(category)

        # Step 4: get personalized papers
        print("[green]Get personalized papers...[/green]")
        ids = get_personalized_papers(category, focus_collection, nb_proposals)

        # Step 5: save personalized papers in Zotero
        if proposals_collection != "":
            print("[green]Saving personalized papers in Zotero...[/green]")
            save_personalized_papers_in_zotero(ids, proposals_collection, with_artifacts)

        # Step 6: display personalized papers to the command line
        search = arxiv.Search(id_list=ids.keys())

        for index, result in enumerate(search.results()):
            print(str(index + 1) + '. [italic yellow][' + list(ids.values())[index] + '][/italic yellow]  [blue][link=' + str(result) + ']' + result.title + '[/link][/blue]')
    else:
        print("[bold red]Error:[/bold red] [italic red]ArXiv category, or sub-category ID non existing.[/italic red] Please specify a valid category ID.")



# %% ../nbs/00_main.ipynb 21
def config_exists(env_var: str):
    """Check if `env_var` environment variable exists"""
    v = env_var.upper()
    if not os.environ.get(v) or os.environ.get(v) == '':
        print("[bold red]Error:[/bold red] [italic red]Configuration option not set.[/italic red] [yellow]Please set the [bold]" + v + "[/bold] environment variable.[/yellow]\n")

def config_check_one_exists(env_vars: list):
    """Check if one of the `env_vars` environment variables exists"""
    for env_var in env_vars:
        if os.environ.get(env_var.upper()):
            return True
    print("[bold red]Error:[/bold red] [italic red]Configuration option not set.[/italic red] [yellow]Please set one of those [bold]" + repr(env_vars) + "[/bold] environment variables.[/yellow]\n")

# %% ../nbs/00_main.ipynb 23
def get_embeddings_dimensions(chroma_client, category: str):
    """Get the embedding dimensions of the given `category`"""
    return len(chroma_client.get_collection(category).peek(1)['embeddings'][0])

# %% ../nbs/00_main.ipynb 24
def init():
    """Initialize the application"""
    # load environment variables
    load_dotenv()

    # check for the existance of all configuration options
    config_exists('ZOTERO_API_KEY')
    config_exists('ZOTERO_LIBRARY_TYPE')
    config_exists('ZOTERO_LIBRARY_ID')
    config_exists('EMBEDDING_SYSTEM')
    config_exists('DOCS_PATH')
    config_exists('RECOMMENDATIONS_PATH')
    config_check_one_exists(['COHERE_API_KEY', 'MODELS_PATH'])

    # download models if not already downloaded
    match embedding_system():
        case 'baai-bge-base-en':
           config_exists('MODELS_PATH')
           download_embedding_model(os.environ.get('MODELS_PATH'), 'BAAI/bge-base-en') 
        case 'cohere':
            config_exists('COHERE_API_KEY')
        case other:
            print("[bold red]Error:[/bold red] [italic red]Configuration option not set.[/italic red] [yellow]Please set the [bold]EMBEDDING_SYSTEM[/bold] environment variable to either [bold]BAAI/bge-base-en[/bold] or [bold]cohere[/bold].[/yellow]\n")            

# %% ../nbs/00_main.ipynb 26
#| eval: false
if __name__ == "__main__":
    init()
    app()
